# 12345_q1

class Book:
    def __init__(self, title, author):
        self.title = title
        self.author = author
        self.is_borrowed = False

    def mark_as_borrowed(self):
        self.is_borrowed = True

    def mark_as_returned(self):
        self.is_borrowed = False


class LibraryMember:
    def __init__(self, name, member_id):
        self.name = name
        self.member_id = member_id
        self.borrowed_books = []

    def borrow_book(self, book):
        if not book.is_borrowed:
            book.mark_as_borrowed()
            self.borrowed_books.append(book)
            print(f"{self.name} borrowed '{book.title}'")
        else:
            print(f"'{book.title}' is already borrowed.")

    def return_book(self, book):
        if book in self.borrowed_books:
            book.mark_as_returned()
            self.borrowed_books.remove(book)
            print(f"{self.name} returned '{book.title}'")
        else:
            print(f"{self.name} did not borrow '{book.title}'")

    def list_borrowed_books(self):
        if self.borrowed_books:
            print(f"{self.name}'s borrowed books:")
            for book in self.borrowed_books:
                print(f"- {book.title} by {book.author}")
        else:
            print(f"{self.name} has no borrowed books.")


# Interactive Code for Library System
book1 = Book("Tunnel Vison", "Bush Hamilton")
book2 = Book("Beauty in the Track", "Mike Stones")
member = LibraryMember("Ronaldo", "B001")

while True:
    action = input("\nChoose action: 1. Borrow 2. Return 3. List Borrowed Books 4. Exit: ")
    if action == '1':
        book_title = input("Enter book title to borrow: ")
        if book_title == "Tunnel Vison":
            member.borrow_book(book1)
        elif book_title == "Beauty in the Track":
            member.borrow_book(book2)
        else:
            print("Book not available.")
    elif action == '2':
        book_title = input("Enter book title to return: ")
        if book_title == "Tunnel Vison":
            member.return_book(book1)
        elif book_title == "Beauty in the Track":
            member.return_book(book2)
        else:
            print("Book not available.")
    elif action == '3':
        member.list_borrowed_books()
    elif action == '4':
        break
    else:
        print("Invalid option.")
